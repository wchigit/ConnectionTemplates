// Creates an Azure AI resource with proxied endpoints for the Azure AI services provider

param location string = resourceGroup().location
param tags object
param name string
param aiHubFriendlyName string = name
param aiHubDescription string = ''
param applicationInsightsId string
param containerRegistryId string
param keyVaultId string
param storageAccountId string
param principalIds array = []
param roleDefinitionId string = '8ebe5a00-799e-43f5-93ac-243d3dce84a7'  // AzureML Data Scientist
param aiServicesId string = ''
param aiServicesTarget string = ''

resource aiHub 'Microsoft.MachineLearningServices/workspaces@2023-08-01-preview' = {
	name: name
	location: location
	tags: tags
	identity: {
		type: 'SystemAssigned'
	}
	properties: {
		// organization
		friendlyName: aiHubFriendlyName
		description: aiHubDescription

		// dependent resources
		keyVault: keyVaultId
		storageAccount: storageAccountId
		applicationInsights: applicationInsightsId
		containerRegistry: containerRegistryId
	}
	kind: 'hub'

	// To connect to Azure AI services
	resource aiServicesConnection 'connections@2024-01-01-preview' = if (aiServicesTarget != ''){
		name: '${name}-connection-AzureOpenAI'
		properties: {
			category: 'AzureOpenAI'
			target: aiServicesTarget
			authType: 'ApiKey'
			isSharedToAll: true
			credentials: {
				key: '${listKeys(aiServicesId, '2021-10-01').key1}'
			}
			metadata: {
				ApiType: 'Azure'
				ResourceId: aiServicesId
			}
		}
	}
}

// create role assignments for the specified principalIds
resource roleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = [for principalId in principalIds: {
	scope: aiHub
	name: guid(name, principalId)
	properties: {
		roleDefinitionId: resourceId('Microsoft.Authorization/roleDefinitions', roleDefinitionId)
		principalId: principalId
	}
}]

output id string = aiHub.id
